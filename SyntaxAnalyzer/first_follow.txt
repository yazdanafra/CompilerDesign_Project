FIRST sets:
  FIRST(ArgList) = { !, (, +, -, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [ }
  FIRST(ArrayLiteral) = { [ }
  FIRST(AssignStmt) = { Id }
  FIRST(Block) = { { }
  FIRST(BreakStmt) = { break }
  FIRST(Call) = { Id }
  FIRST(ContinueStmt) = { continue }
  FIRST(ExprStmt) = { !, (, +, -, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [ }
  FIRST(Expression) = { !, (, +, -, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [ }
  FIRST(FunctionDecl) = { fn }
  FIRST(IfStmt) = { if }
  FIRST(LValue) = { Id }
  FIRST(LetDecl) = { let }
  FIRST(LoopStmt) = { loop }
  FIRST(Param) = { Id }
  FIRST(ParamList) = { Id }
  FIRST(Pattern) = { (, Id }
  FIRST(PatternList) = { (, Id }
  FIRST(Primary) = { (, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [ }
  FIRST(PrintStmt) = { println! }
  FIRST(Program) = { !, (, +, -, BoolLiteral, Decimal, EOF, Hexadecimal, Id, StringLiteral, [, bool, break, continue, fn, i32, if, let, loop, println!, return }
  FIRST(ReturnStmt) = { return }
  FIRST(Statement) = { !, (, +, -, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [, bool, break, continue, i32, if, let, loop, println!, return }
  FIRST(TopLevel) = { !, (, +, -, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [, bool, break, continue, fn, i32, if, let, loop, println!, return }
  FIRST(TupleLiteral) = { ( }
  FIRST(Type) = { (, [, bool, i32 }
  FIRST(TypeDecl) = { (, [, bool, i32 }
  FIRST(TypeList) = { (, [, bool, i32 }
  FIRST(UnaryExpr) = { !, (, +, -, BoolLiteral, Decimal, Hexadecimal, Id, StringLiteral, [ }

FOLLOW sets:
  FOLLOW(ArgList) = {  }
  FOLLOW(ArrayLiteral) = { (BinaryOp }
  FOLLOW(AssignStmt) = { SEMI? }
  FOLLOW(Block) = { !, (, (else, )?, +, -, BoolLiteral, Decimal, EOF, Hexadecimal, Id, SEMI?, StringLiteral, [, bool, break, continue, fn, i32, if, let, loop, println!, return, | }
  FOLLOW(BreakStmt) = { SEMI? }
  FOLLOW(Call) = { (BinaryOp }
  FOLLOW(ContinueStmt) = { SEMI? }
  FOLLOW(ExprStmt) = { SEMI? }
  FOLLOW(Expression) = { (BinaryOp, ), )*, )?, ,ArgList, ,Expression*, SEMI?, ], { }
  FOLLOW(FunctionDecl) = { !, (, +, -, BoolLiteral, Decimal, EOF, Hexadecimal, Id, StringLiteral, [, bool, break, continue, fn, i32, if, let, loop, println!, return }
  FOLLOW(IfStmt) = { SEMI? }
  FOLLOW(LValue) = { = }
  FOLLOW(LetDecl) = { SEMI? }
  FOLLOW(LoopStmt) = { SEMI? }
  FOLLOW(Param) = { ,ParamList }
  FOLLOW(ParamList) = {  }
  FOLLOW(Pattern) = { (:, ), , }
  FOLLOW(PatternList) = { ) }
  FOLLOW(Primary) = { (BinaryOp }
  FOLLOW(PrintStmt) = { SEMI? }
  FOLLOW(Program) = { $ }
  FOLLOW(ReturnStmt) = { SEMI? }
  FOLLOW(Statement) = { SEMI? }
  FOLLOW(TopLevel) = { !, (, +, -, BoolLiteral, Decimal, EOF, Hexadecimal, Id, StringLiteral, [, bool, break, continue, fn, i32, if, let, loop, println!, return }
  FOLLOW(TupleLiteral) = { (BinaryOp }
  FOLLOW(Type) = { (;, ), )?, ,TypeList, Id }
  FOLLOW(TypeDecl) = { SEMI? }
  FOLLOW(TypeList) = { ) }
  FOLLOW(UnaryExpr) = { (BinaryOp }
