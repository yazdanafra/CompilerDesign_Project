Token(T_Comment, '// Function returns a bool
', None, line=1, col=1)
Token(T_Fn, 'fn', None, line=2, col=1)
Token(T_Whitespace, ' ', None, line=2, col=3)
Token(T_Id, 'is_positive', None, line=2, col=4)
Token(T_LP, '(', None, line=2, col=15)
Token(T_Id, 'n', None, line=2, col=16)
Token(T_Colon, ':', None, line=2, col=17)
Token(T_Whitespace, ' ', None, line=2, col=18)
Token(T_Int, 'i32', None, line=2, col=19)
Token(T_RP, ')', None, line=2, col=22)
Token(T_Whitespace, ' ', None, line=2, col=23)
Token(T_Arrow, '->', None, line=2, col=24)
Token(T_Whitespace, ' ', None, line=2, col=26)
Token(T_Bool, 'bool', None, line=2, col=27)
Token(T_Whitespace, ' ', None, line=2, col=31)
Token(T_LC, '{', None, line=2, col=32)
Token(T_Whitespace, '
    ', None, line=2, col=33)
Token(T_Return, 'return', None, line=3, col=5)
Token(T_Whitespace, ' ', None, line=3, col=11)
Token(T_Id, 'n', None, line=3, col=12)
Token(T_Whitespace, ' ', None, line=3, col=13)
Token(T_ROp_G, '>', None, line=3, col=14)
Token(T_Whitespace, ' ', None, line=3, col=15)
Token(T_Decimal, '0', 0, line=3, col=16)
Token(T_Semicolon, ';', None, line=3, col=17)
Token(T_Whitespace, '
', None, line=3, col=18)
Token(T_RC, '}', None, line=4, col=1)
Token(T_Whitespace, '

', None, line=4, col=2)
Token(T_Fn, 'fn', None, line=6, col=1)
Token(T_Whitespace, ' ', None, line=6, col=3)
Token(T_Id, 'main', None, line=6, col=4)
Token(T_LP, '(', None, line=6, col=8)
Token(T_RP, ')', None, line=6, col=9)
Token(T_Whitespace, ' ', None, line=6, col=10)
Token(T_LC, '{', None, line=6, col=11)
Token(T_Whitespace, '
    ', None, line=6, col=12)
Token(T_Comment, '// x is declared as an i32
', None, line=7, col=5)
Token(T_Whitespace, '    ', None, line=8, col=1)
Token(T_Let, 'let', None, line=8, col=5)
Token(T_Whitespace, ' ', None, line=8, col=8)
Token(T_Mut, 'mut', None, line=8, col=9)
Token(T_Whitespace, ' ', None, line=8, col=12)
Token(T_Id, 'x', None, line=8, col=13)
Token(T_Colon, ':', None, line=8, col=14)
Token(T_Whitespace, ' ', None, line=8, col=15)
Token(T_Int, 'i32', None, line=8, col=16)
Token(T_Whitespace, ' ', None, line=8, col=19)
Token(T_Assign, '=', None, line=8, col=20)
Token(T_Whitespace, ' ', None, line=8, col=21)
Token(T_Decimal, '10', 10, line=8, col=22)
Token(T_Semicolon, ';', None, line=8, col=24)
Token(T_Whitespace, '

    ', None, line=8, col=25)
Token(T_Comment, '// ❌ Semantic Rule 10 violated:
', None, line=10, col=5)
Token(T_Whitespace, '    ', None, line=11, col=1)
Token(T_Comment, '// The right-hand side is a bool (from is_positive),
', None, line=11, col=5)
Token(T_Whitespace, '    ', None, line=12, col=1)
Token(T_Comment, '// but x is of type i32
', None, line=12, col=5)
Token(T_Whitespace, '    ', None, line=13, col=1)
Token(T_Id, 'x', None, line=13, col=5)
Token(T_Whitespace, ' ', None, line=13, col=6)
Token(T_Assign, '=', None, line=13, col=7)
Token(T_Whitespace, ' ', None, line=13, col=8)
Token(T_Id, 'is_positive', None, line=13, col=9)
Token(T_LP, '(', None, line=13, col=20)
Token(T_Decimal, '5', 5, line=13, col=21)
Token(T_RP, ')', None, line=13, col=22)
Token(T_Semicolon, ';', None, line=13, col=23)
Token(T_Whitespace, '

    ', None, line=13, col=24)
Token(T_Print, 'println!', None, line=15, col=5)
Token(T_LP, '(', None, line=15, col=13)
Token(T_String, '"x = {x}"', None, line=15, col=14)
Token(T_Comma, ',', None, line=15, col=23)
Token(T_Whitespace, ' ', None, line=15, col=24)
Token(T_Id, 'x', None, line=15, col=25)
Token(T_Assign, '=', None, line=15, col=26)
Token(T_Id, 'x', None, line=15, col=27)
Token(T_RP, ')', None, line=15, col=28)
Token(T_Semicolon, ';', None, line=15, col=29)
Token(T_Whitespace, '
', None, line=15, col=30)
Token(T_RC, '}', None, line=16, col=1)
Token(T_Whitespace, '
', None, line=16, col=2)
Token(T_EOF, '', None, line=17, col=1)

Symbol Table:
is_positive: [(2, 4), (13, 9)]
n: [(2, 16), (3, 12)]
main: [(6, 4)]
x: [(8, 13), (13, 5), (15, 25), (15, 27)]
