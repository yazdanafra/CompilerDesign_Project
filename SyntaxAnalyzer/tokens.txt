Token(T_Comment, '// ──────────────────────────────────────────────────────────────────────────────
', None, line=1, col=1)
Token(T_Comment, '// Final Trust Test Program (no return errors, no bad '!')
', None, line=2, col=1)
Token(T_Comment, '// ──────────────────────────────────────────────────────────────────────────────
', None, line=3, col=1)
Token(T_Whitespace, '
', None, line=4, col=1)
Token(T_Comment, '// Globals
', None, line=5, col=1)
Token(T_Let, 'let', None, line=6, col=1)
Token(T_Whitespace, ' ', None, line=6, col=4)
Token(T_Mut, 'mut', None, line=6, col=5)
Token(T_Whitespace, ' ', None, line=6, col=8)
Token(T_Id, 'counter', None, line=6, col=9)
Token(T_Colon, ':', None, line=6, col=16)
Token(T_Whitespace, ' ', None, line=6, col=17)
Token(T_Int, 'i32', None, line=6, col=18)
Token(T_Whitespace, ' ', None, line=6, col=21)
Token(T_Assign, '=', None, line=6, col=22)
Token(T_Whitespace, ' ', None, line=6, col=23)
Token(T_Decimal, '0', 0, line=6, col=24)
Token(T_Semicolon, ';', None, line=6, col=25)
Token(T_Whitespace, '
', None, line=6, col=26)
Token(T_Let, 'let', None, line=7, col=1)
Token(T_Whitespace, ' ', None, line=7, col=4)
Token(T_Id, 'limit', None, line=7, col=5)
Token(T_Colon, ':', None, line=7, col=10)
Token(T_Whitespace, ' ', None, line=7, col=11)
Token(T_Int, 'i32', None, line=7, col=12)
Token(T_Whitespace, '     ', None, line=7, col=15)
Token(T_Assign, '=', None, line=7, col=20)
Token(T_Whitespace, ' ', None, line=7, col=21)
Token(T_Decimal, '5', 5, line=7, col=22)
Token(T_Semicolon, ';', None, line=7, col=23)
Token(T_Whitespace, '
', None, line=7, col=24)
Token(T_Let, 'let', None, line=8, col=1)
Token(T_Whitespace, ' ', None, line=8, col=4)
Token(T_Id, 'flags', None, line=8, col=5)
Token(T_Colon, ':', None, line=8, col=10)
Token(T_Whitespace, ' ', None, line=8, col=11)
Token(T_LB, '[', None, line=8, col=12)
Token(T_Bool, 'bool', None, line=8, col=13)
Token(T_Semicolon, ';', None, line=8, col=17)
Token(T_Whitespace, ' ', None, line=8, col=18)
Token(T_Decimal, '3', 3, line=8, col=19)
Token(T_RB, ']', None, line=8, col=20)
Token(T_Whitespace, '    ', None, line=8, col=21)
Token(T_Assign, '=', None, line=8, col=25)
Token(T_Whitespace, ' ', None, line=8, col=26)
Token(T_LB, '[', None, line=8, col=27)
Token(T_True, 'true', None, line=8, col=28)
Token(T_Comma, ',', None, line=8, col=32)
Token(T_Whitespace, ' ', None, line=8, col=33)
Token(T_False, 'false', None, line=8, col=34)
Token(T_Comma, ',', None, line=8, col=39)
Token(T_Whitespace, ' ', None, line=8, col=40)
Token(T_True, 'true', None, line=8, col=41)
Token(T_RB, ']', None, line=8, col=45)
Token(T_Semicolon, ';', None, line=8, col=46)
Token(T_Whitespace, '
', None, line=8, col=47)
Token(T_Let, 'let', None, line=9, col=1)
Token(T_Whitespace, ' ', None, line=9, col=4)
Token(T_Id, 'message', None, line=9, col=5)
Token(T_Colon, ':', None, line=9, col=12)
Token(T_Whitespace, ' ', None, line=9, col=13)
Token(T_LB, '[', None, line=9, col=14)
Token(T_Int, 'i32', None, line=9, col=15)
Token(T_Semicolon, ';', None, line=9, col=18)
Token(T_Whitespace, ' ', None, line=9, col=19)
Token(T_Decimal, '4', 4, line=9, col=20)
Token(T_RB, ']', None, line=9, col=21)
Token(T_Whitespace, '   ', None, line=9, col=22)
Token(T_Assign, '=', None, line=9, col=25)
Token(T_Whitespace, ' ', None, line=9, col=26)
Token(T_LB, '[', None, line=9, col=27)
Token(T_Decimal, '10', 10, line=9, col=28)
Token(T_Comma, ',', None, line=9, col=30)
Token(T_Whitespace, ' ', None, line=9, col=31)
Token(T_Decimal, '20', 20, line=9, col=32)
Token(T_Comma, ',', None, line=9, col=34)
Token(T_Whitespace, ' ', None, line=9, col=35)
Token(T_Decimal, '30', 30, line=9, col=36)
Token(T_Comma, ',', None, line=9, col=38)
Token(T_Whitespace, ' ', None, line=9, col=39)
Token(T_Decimal, '40', 40, line=9, col=40)
Token(T_RB, ']', None, line=9, col=42)
Token(T_Semicolon, ';', None, line=9, col=43)
Token(T_Whitespace, '

', None, line=9, col=44)
Token(T_Comment, '// factorial returns i32
', None, line=11, col=1)
Token(T_Fn, 'fn', None, line=12, col=1)
Token(T_Whitespace, ' ', None, line=12, col=3)
Token(T_Id, 'factorial', None, line=12, col=4)
Token(T_LP, '(', None, line=12, col=13)
Token(T_Id, 'n', None, line=12, col=14)
Token(T_Colon, ':', None, line=12, col=15)
Token(T_Whitespace, ' ', None, line=12, col=16)
Token(T_Int, 'i32', None, line=12, col=17)
Token(T_RP, ')', None, line=12, col=20)
Token(T_Whitespace, ' ', None, line=12, col=21)
Token(T_Arrow, '->', None, line=12, col=22)
Token(T_Whitespace, ' ', None, line=12, col=24)
Token(T_Int, 'i32', None, line=12, col=25)
Token(T_Whitespace, ' ', None, line=12, col=28)
Token(T_LC, '{', None, line=12, col=29)
Token(T_Whitespace, '
    ', None, line=12, col=30)
Token(T_If, 'if', None, line=13, col=5)
Token(T_Whitespace, ' ', None, line=13, col=7)
Token(T_Id, 'n', None, line=13, col=8)
Token(T_Whitespace, ' ', None, line=13, col=9)
Token(T_ROp_LE, '<=', None, line=13, col=10)
Token(T_Whitespace, ' ', None, line=13, col=12)
Token(T_Decimal, '1', 1, line=13, col=13)
Token(T_Whitespace, ' ', None, line=13, col=14)
Token(T_LC, '{', None, line=13, col=15)
Token(T_Whitespace, '
        ', None, line=13, col=16)
Token(T_Return, 'return', None, line=14, col=9)
Token(T_Whitespace, ' ', None, line=14, col=15)
Token(T_Decimal, '1', 1, line=14, col=16)
Token(T_Semicolon, ';', None, line=14, col=17)
Token(T_Whitespace, '
    ', None, line=14, col=18)
Token(T_RC, '}', None, line=15, col=5)
Token(T_Whitespace, ' ', None, line=15, col=6)
Token(T_Else, 'else', None, line=15, col=7)
Token(T_Whitespace, ' ', None, line=15, col=11)
Token(T_LC, '{', None, line=15, col=12)
Token(T_Whitespace, '
        ', None, line=15, col=13)
Token(T_Return, 'return', None, line=16, col=9)
Token(T_Whitespace, ' ', None, line=16, col=15)
Token(T_Id, 'n', None, line=16, col=16)
Token(T_Whitespace, ' ', None, line=16, col=17)
Token(T_AOp_ML, '*', None, line=16, col=18)
Token(T_Whitespace, ' ', None, line=16, col=19)
Token(T_Id, 'factorial', None, line=16, col=20)
Token(T_LP, '(', None, line=16, col=29)
Token(T_Id, 'n', None, line=16, col=30)
Token(T_Whitespace, ' ', None, line=16, col=31)
Token(T_AOp_MN, '-', None, line=16, col=32)
Token(T_Whitespace, ' ', None, line=16, col=33)
Token(T_Decimal, '1', 1, line=16, col=34)
Token(T_RP, ')', None, line=16, col=35)
Token(T_Semicolon, ';', None, line=16, col=36)
Token(T_Whitespace, '
    ', None, line=16, col=37)
Token(T_RC, '}', None, line=17, col=5)
Token(T_Whitespace, '
', None, line=17, col=6)
Token(T_RC, '}', None, line=18, col=1)
Token(T_Whitespace, '

', None, line=18, col=2)
Token(T_Comment, '// sum_and_diff now returns i32
', None, line=20, col=1)
Token(T_Fn, 'fn', None, line=21, col=1)
Token(T_Whitespace, ' ', None, line=21, col=3)
Token(T_Id, 'sum_and_diff', None, line=21, col=4)
Token(T_LP, '(', None, line=21, col=16)
Token(T_Id, 'a', None, line=21, col=17)
Token(T_Colon, ':', None, line=21, col=18)
Token(T_Whitespace, ' ', None, line=21, col=19)
Token(T_Int, 'i32', None, line=21, col=20)
Token(T_Comma, ',', None, line=21, col=23)
Token(T_Whitespace, ' ', None, line=21, col=24)
Token(T_Id, 'b', None, line=21, col=25)
Token(T_Colon, ':', None, line=21, col=26)
Token(T_Whitespace, ' ', None, line=21, col=27)
Token(T_Int, 'i32', None, line=21, col=28)
Token(T_RP, ')', None, line=21, col=31)
Token(T_Whitespace, ' ', None, line=21, col=32)
Token(T_Arrow, '->', None, line=21, col=33)
Token(T_Whitespace, ' ', None, line=21, col=35)
Token(T_Int, 'i32', None, line=21, col=36)
Token(T_Whitespace, ' ', None, line=21, col=39)
Token(T_LC, '{', None, line=21, col=40)
Token(T_Whitespace, '
    ', None, line=21, col=41)
Token(T_Let, 'let', None, line=22, col=5)
Token(T_Whitespace, ' ', None, line=22, col=8)
Token(T_Id, 'sum', None, line=22, col=9)
Token(T_Colon, ':', None, line=22, col=12)
Token(T_Whitespace, ' ', None, line=22, col=13)
Token(T_Int, 'i32', None, line=22, col=14)
Token(T_Whitespace, ' ', None, line=22, col=17)
Token(T_Assign, '=', None, line=22, col=18)
Token(T_Whitespace, ' ', None, line=22, col=19)
Token(T_Id, 'a', None, line=22, col=20)
Token(T_Whitespace, ' ', None, line=22, col=21)
Token(T_AOp_Trust, '+', None, line=22, col=22)
Token(T_Whitespace, ' ', None, line=22, col=23)
Token(T_Id, 'b', None, line=22, col=24)
Token(T_Semicolon, ';', None, line=22, col=25)
Token(T_Whitespace, '

    ', None, line=22, col=26)
Token(T_Comment, '// compute absolute difference
', None, line=24, col=5)
Token(T_Whitespace, '    ', None, line=25, col=1)
Token(T_Let, 'let', None, line=25, col=5)
Token(T_Whitespace, ' ', None, line=25, col=8)
Token(T_Mut, 'mut', None, line=25, col=9)
Token(T_Whitespace, ' ', None, line=25, col=12)
Token(T_Id, 'diff', None, line=25, col=13)
Token(T_Colon, ':', None, line=25, col=17)
Token(T_Whitespace, ' ', None, line=25, col=18)
Token(T_Int, 'i32', None, line=25, col=19)
Token(T_Semicolon, ';', None, line=25, col=22)
Token(T_Whitespace, '
    ', None, line=25, col=23)
Token(T_If, 'if', None, line=26, col=5)
Token(T_Whitespace, ' ', None, line=26, col=7)
Token(T_Id, 'a', None, line=26, col=8)
Token(T_Whitespace, ' ', None, line=26, col=9)
Token(T_ROp_GE, '>=', None, line=26, col=10)
Token(T_Whitespace, ' ', None, line=26, col=12)
Token(T_Id, 'b', None, line=26, col=13)
Token(T_Whitespace, ' ', None, line=26, col=14)
Token(T_LC, '{', None, line=26, col=15)
Token(T_Whitespace, '
        ', None, line=26, col=16)
Token(T_Id, 'diff', None, line=27, col=9)
Token(T_Whitespace, ' ', None, line=27, col=13)
Token(T_Assign, '=', None, line=27, col=14)
Token(T_Whitespace, ' ', None, line=27, col=15)
Token(T_Id, 'a', None, line=27, col=16)
Token(T_Whitespace, ' ', None, line=27, col=17)
Token(T_AOp_MN, '-', None, line=27, col=18)
Token(T_Whitespace, ' ', None, line=27, col=19)
Token(T_Id, 'b', None, line=27, col=20)
Token(T_Semicolon, ';', None, line=27, col=21)
Token(T_Whitespace, '
    ', None, line=27, col=22)
Token(T_RC, '}', None, line=28, col=5)
Token(T_Whitespace, ' ', None, line=28, col=6)
Token(T_Else, 'else', None, line=28, col=7)
Token(T_Whitespace, ' ', None, line=28, col=11)
Token(T_LC, '{', None, line=28, col=12)
Token(T_Whitespace, '
        ', None, line=28, col=13)
Token(T_Id, 'diff', None, line=29, col=9)
Token(T_Whitespace, ' ', None, line=29, col=13)
Token(T_Assign, '=', None, line=29, col=14)
Token(T_Whitespace, ' ', None, line=29, col=15)
Token(T_Id, 'b', None, line=29, col=16)
Token(T_Whitespace, ' ', None, line=29, col=17)
Token(T_AOp_MN, '-', None, line=29, col=18)
Token(T_Whitespace, ' ', None, line=29, col=19)
Token(T_Id, 'a', None, line=29, col=20)
Token(T_Semicolon, ';', None, line=29, col=21)
Token(T_Whitespace, '
    ', None, line=29, col=22)
Token(T_RC, '}', None, line=30, col=5)
Token(T_Whitespace, '

    ', None, line=30, col=6)
Token(T_Return, 'return', None, line=32, col=5)
Token(T_Whitespace, ' ', None, line=32, col=11)
Token(T_Id, 'sum', None, line=32, col=12)
Token(T_Whitespace, ' ', None, line=32, col=15)
Token(T_AOp_Trust, '+', None, line=32, col=16)
Token(T_Whitespace, ' ', None, line=32, col=17)
Token(T_Id, 'diff', None, line=32, col=18)
Token(T_Semicolon, ';', None, line=32, col=22)
Token(T_Whitespace, '
', None, line=32, col=23)
Token(T_RC, '}', None, line=33, col=1)
Token(T_Whitespace, '

', None, line=33, col=2)
Token(T_Comment, '// swap returns a tuple of two i32s
', None, line=35, col=1)
Token(T_Fn, 'fn', None, line=36, col=1)
Token(T_Whitespace, ' ', None, line=36, col=3)
Token(T_Id, 'swap', None, line=36, col=4)
Token(T_LP, '(', None, line=36, col=8)
Token(T_Id, 'x', None, line=36, col=9)
Token(T_Colon, ':', None, line=36, col=10)
Token(T_Whitespace, ' ', None, line=36, col=11)
Token(T_Int, 'i32', None, line=36, col=12)
Token(T_Comma, ',', None, line=36, col=15)
Token(T_Whitespace, ' ', None, line=36, col=16)
Token(T_Id, 'y', None, line=36, col=17)
Token(T_Colon, ':', None, line=36, col=18)
Token(T_Whitespace, ' ', None, line=36, col=19)
Token(T_Int, 'i32', None, line=36, col=20)
Token(T_RP, ')', None, line=36, col=23)
Token(T_Whitespace, ' ', None, line=36, col=24)
Token(T_Arrow, '->', None, line=36, col=25)
Token(T_Whitespace, ' ', None, line=36, col=27)
Token(T_LP, '(', None, line=36, col=28)
Token(T_Int, 'i32', None, line=36, col=29)
Token(T_Comma, ',', None, line=36, col=32)
Token(T_Whitespace, ' ', None, line=36, col=33)
Token(T_Int, 'i32', None, line=36, col=34)
Token(T_RP, ')', None, line=36, col=37)
Token(T_Whitespace, ' ', None, line=36, col=38)
Token(T_LC, '{', None, line=36, col=39)
Token(T_Whitespace, '
    ', None, line=36, col=40)
Token(T_Return, 'return', None, line=37, col=5)
Token(T_Whitespace, ' ', None, line=37, col=11)
Token(T_LP, '(', None, line=37, col=12)
Token(T_Id, 'y', None, line=37, col=13)
Token(T_Comma, ',', None, line=37, col=14)
Token(T_Whitespace, ' ', None, line=37, col=15)
Token(T_Id, 'x', None, line=37, col=16)
Token(T_RP, ')', None, line=37, col=17)
Token(T_Semicolon, ';', None, line=37, col=18)
Token(T_Whitespace, '
', None, line=37, col=19)
Token(T_RC, '}', None, line=38, col=1)
Token(T_Whitespace, '

', None, line=38, col=2)
Token(T_Fn, 'fn', None, line=40, col=1)
Token(T_Whitespace, ' ', None, line=40, col=3)
Token(T_Id, 'main', None, line=40, col=4)
Token(T_LP, '(', None, line=40, col=8)
Token(T_RP, ')', None, line=40, col=9)
Token(T_Whitespace, ' ', None, line=40, col=10)
Token(T_LC, '{', None, line=40, col=11)
Token(T_Whitespace, '
    ', None, line=40, col=12)
Token(T_Comment, '// Print initial state
', None, line=41, col=5)
Token(T_Whitespace, '    ', None, line=42, col=1)
Token(T_Print, 'println!', None, line=42, col=5)
Token(T_LP, '(', None, line=42, col=13)
Token(T_String, '"Initial counter = {}"', None, line=42, col=14)
Token(T_Comma, ',', None, line=42, col=36)
Token(T_Whitespace, ' ', None, line=42, col=37)
Token(T_Id, 'counter', None, line=42, col=38)
Token(T_RP, ')', None, line=42, col=45)
Token(T_Semicolon, ';', None, line=42, col=46)
Token(T_Whitespace, '
    ', None, line=42, col=47)
Token(T_Print, 'println!', None, line=43, col=5)
Token(T_LP, '(', None, line=43, col=13)
Token(T_String, '"limit = {}"', None, line=43, col=14)
Token(T_Comma, ',', None, line=43, col=26)
Token(T_Whitespace, '      ', None, line=43, col=27)
Token(T_Id, 'limit', None, line=43, col=33)
Token(T_RP, ')', None, line=43, col=38)
Token(T_Semicolon, ';', None, line=43, col=39)
Token(T_Whitespace, '
    ', None, line=43, col=40)
Token(T_Print, 'println!', None, line=44, col=5)
Token(T_LP, '(', None, line=44, col=13)
Token(T_Whitespace, '
        ', None, line=44, col=14)
Token(T_String, '"flags = {}, {}, {}"', None, line=45, col=9)
Token(T_Comma, ',', None, line=45, col=29)
Token(T_Whitespace, '
        ', None, line=45, col=30)
Token(T_Id, 'flags', None, line=46, col=9)
Token(T_LB, '[', None, line=46, col=14)
Token(T_Decimal, '1', 1, line=46, col=15)
Token(T_RB, ']', None, line=46, col=16)
Token(T_Comma, ',', None, line=46, col=17)
Token(T_Whitespace, ' ', None, line=46, col=18)
Token(T_Id, 'flags', None, line=46, col=19)
Token(T_LB, '[', None, line=46, col=24)
Token(T_Decimal, '1', 1, line=46, col=25)
Token(T_RB, ']', None, line=46, col=26)
Token(T_Comma, ',', None, line=46, col=27)
Token(T_Whitespace, ' ', None, line=46, col=28)
Token(T_Id, 'flags', None, line=46, col=29)
Token(T_LB, '[', None, line=46, col=34)
Token(T_Decimal, '2', 2, line=46, col=35)
Token(T_RB, ']', None, line=46, col=36)
Token(T_Whitespace, '
    ', None, line=46, col=37)
Token(T_RP, ')', None, line=47, col=5)
Token(T_Semicolon, ';', None, line=47, col=6)
Token(T_Whitespace, '
    ', None, line=47, col=7)
Token(T_Print, 'println!', None, line=48, col=5)
Token(T_LP, '(', None, line=48, col=13)
Token(T_Whitespace, '
        ', None, line=48, col=14)
Token(T_String, '"message = {}, {}, {}, {}"', None, line=49, col=9)
Token(T_Comma, ',', None, line=49, col=35)
Token(T_Whitespace, '
        ', None, line=49, col=36)
Token(T_Id, 'message', None, line=50, col=9)
Token(T_LB, '[', None, line=50, col=16)
Token(T_Decimal, '1', 1, line=50, col=17)
Token(T_RB, ']', None, line=50, col=18)
Token(T_Comma, ',', None, line=50, col=19)
Token(T_Whitespace, ' ', None, line=50, col=20)
Token(T_Id, 'message', None, line=50, col=21)
Token(T_LB, '[', None, line=50, col=28)
Token(T_Decimal, '1', 1, line=50, col=29)
Token(T_RB, ']', None, line=50, col=30)
Token(T_Comma, ',', None, line=50, col=31)
Token(T_Whitespace, ' ', None, line=50, col=32)
Token(T_Id, 'message', None, line=50, col=33)
Token(T_LB, '[', None, line=50, col=40)
Token(T_Decimal, '2', 2, line=50, col=41)
Token(T_RB, ']', None, line=50, col=42)
Token(T_Comma, ',', None, line=50, col=43)
Token(T_Whitespace, ' ', None, line=50, col=44)
Token(T_Id, 'message', None, line=50, col=45)
Token(T_LB, '[', None, line=50, col=52)
Token(T_Decimal, '3', 3, line=50, col=53)
Token(T_RB, ']', None, line=50, col=54)
Token(T_Whitespace, '
    ', None, line=50, col=55)
Token(T_RP, ')', None, line=51, col=5)
Token(T_Semicolon, ';', None, line=51, col=6)
Token(T_Whitespace, '

    ', None, line=51, col=7)
Token(T_Comment, '// Loop until counter >= limit
', None, line=53, col=5)
Token(T_Whitespace, '    ', None, line=54, col=1)
Token(T_Loop, 'loop', None, line=54, col=5)
Token(T_Whitespace, ' ', None, line=54, col=9)
Token(T_LC, '{', None, line=54, col=10)
Token(T_Whitespace, '
        ', None, line=54, col=11)
Token(T_If, 'if', None, line=55, col=9)
Token(T_Whitespace, ' ', None, line=55, col=11)
Token(T_Id, 'counter', None, line=55, col=12)
Token(T_Whitespace, ' ', None, line=55, col=19)
Token(T_ROp_GE, '>=', None, line=55, col=20)
Token(T_Whitespace, ' ', None, line=55, col=22)
Token(T_Id, 'limit', None, line=55, col=23)
Token(T_Whitespace, ' ', None, line=55, col=28)
Token(T_LC, '{', None, line=55, col=29)
Token(T_Whitespace, '
            ', None, line=55, col=30)
Token(T_Break, 'break', None, line=56, col=13)
Token(T_Semicolon, ';', None, line=56, col=18)
Token(T_Whitespace, '
        ', None, line=56, col=19)
Token(T_RC, '}', None, line=57, col=9)
Token(T_Whitespace, '
        ', None, line=57, col=10)
Token(T_Id, 'counter', None, line=58, col=9)
Token(T_Whitespace, ' ', None, line=58, col=16)
Token(T_Assign, '=', None, line=58, col=17)
Token(T_Whitespace, ' ', None, line=58, col=18)
Token(T_Id, 'counter', None, line=58, col=19)
Token(T_Whitespace, ' ', None, line=58, col=26)
Token(T_AOp_Trust, '+', None, line=58, col=27)
Token(T_Whitespace, ' ', None, line=58, col=28)
Token(T_Decimal, '1', 1, line=58, col=29)
Token(T_Semicolon, ';', None, line=58, col=30)
Token(T_Whitespace, '
        ', None, line=58, col=31)
Token(T_Print, 'println!', None, line=59, col=9)
Token(T_LP, '(', None, line=59, col=17)
Token(T_String, '"Counter now = {}"', None, line=59, col=18)
Token(T_Comma, ',', None, line=59, col=36)
Token(T_Whitespace, ' ', None, line=59, col=37)
Token(T_Id, 'counter', None, line=59, col=38)
Token(T_RP, ')', None, line=59, col=45)
Token(T_Semicolon, ';', None, line=59, col=46)
Token(T_Whitespace, '
    ', None, line=59, col=47)
Token(T_RC, '}', None, line=60, col=5)
Token(T_Whitespace, '

    ', None, line=60, col=6)
Token(T_Comment, '// Compute 5!
', None, line=62, col=5)
Token(T_Whitespace, '    ', None, line=63, col=1)
Token(T_Let, 'let', None, line=63, col=5)
Token(T_Whitespace, ' ', None, line=63, col=8)
Token(T_Id, 'fact5', None, line=63, col=9)
Token(T_Colon, ':', None, line=63, col=14)
Token(T_Whitespace, ' ', None, line=63, col=15)
Token(T_Int, 'i32', None, line=63, col=16)
Token(T_Whitespace, ' ', None, line=63, col=19)
Token(T_Assign, '=', None, line=63, col=20)
Token(T_Whitespace, ' ', None, line=63, col=21)
Token(T_Id, 'factorial', None, line=63, col=22)
Token(T_LP, '(', None, line=63, col=31)
Token(T_Decimal, '5', 5, line=63, col=32)
Token(T_RP, ')', None, line=63, col=33)
Token(T_Semicolon, ';', None, line=63, col=34)
Token(T_Whitespace, '
    ', None, line=63, col=35)
Token(T_Print, 'println!', None, line=64, col=5)
Token(T_LP, '(', None, line=64, col=13)
Token(T_String, '"5! = {}"', None, line=64, col=14)
Token(T_Comma, ',', None, line=64, col=23)
Token(T_Whitespace, ' ', None, line=64, col=24)
Token(T_Id, 'fact5', None, line=64, col=25)
Token(T_RP, ')', None, line=64, col=30)
Token(T_Semicolon, ';', None, line=64, col=31)
Token(T_Whitespace, '

    ', None, line=64, col=32)
Token(T_Comment, '// sum_and_diff
', None, line=66, col=5)
Token(T_Whitespace, '    ', None, line=67, col=1)
Token(T_Let, 'let', None, line=67, col=5)
Token(T_Whitespace, ' ', None, line=67, col=8)
Token(T_Id, 's', None, line=67, col=9)
Token(T_Colon, ':', None, line=67, col=10)
Token(T_Whitespace, ' ', None, line=67, col=11)
Token(T_Int, 'i32', None, line=67, col=12)
Token(T_Whitespace, ' ', None, line=67, col=15)
Token(T_Assign, '=', None, line=67, col=16)
Token(T_Whitespace, ' ', None, line=67, col=17)
Token(T_Id, 'sum_and_diff', None, line=67, col=18)
Token(T_LP, '(', None, line=67, col=30)
Token(T_Decimal, '7', 7, line=67, col=31)
Token(T_Comma, ',', None, line=67, col=32)
Token(T_Whitespace, ' ', None, line=67, col=33)
Token(T_Decimal, '3', 3, line=67, col=34)
Token(T_RP, ')', None, line=67, col=35)
Token(T_Semicolon, ';', None, line=67, col=36)
Token(T_Whitespace, '
    ', None, line=67, col=37)
Token(T_Print, 'println!', None, line=68, col=5)
Token(T_LP, '(', None, line=68, col=13)
Token(T_String, '"sum+diff of (7,3) = {}"', None, line=68, col=14)
Token(T_Comma, ',', None, line=68, col=38)
Token(T_Whitespace, ' ', None, line=68, col=39)
Token(T_Id, 's', None, line=68, col=40)
Token(T_RP, ')', None, line=68, col=41)
Token(T_Semicolon, ';', None, line=68, col=42)
Token(T_Whitespace, '

    ', None, line=68, col=43)
Token(T_Comment, '// swap demonstration
', None, line=70, col=5)
Token(T_Whitespace, '    ', None, line=71, col=1)
Token(T_Let, 'let', None, line=71, col=5)
Token(T_Whitespace, ' ', None, line=71, col=8)
Token(T_LP, '(', None, line=71, col=9)
Token(T_Id, 'new_a', None, line=71, col=10)
Token(T_Comma, ',', None, line=71, col=15)
Token(T_Whitespace, ' ', None, line=71, col=16)
Token(T_Id, 'new_b', None, line=71, col=17)
Token(T_RP, ')', None, line=71, col=22)
Token(T_Colon, ':', None, line=71, col=23)
Token(T_Whitespace, ' ', None, line=71, col=24)
Token(T_LP, '(', None, line=71, col=25)
Token(T_Int, 'i32', None, line=71, col=26)
Token(T_Comma, ',', None, line=71, col=29)
Token(T_Whitespace, ' ', None, line=71, col=30)
Token(T_Int, 'i32', None, line=71, col=31)
Token(T_RP, ')', None, line=71, col=34)
Token(T_Whitespace, ' ', None, line=71, col=35)
Token(T_Assign, '=', None, line=71, col=36)
Token(T_Whitespace, ' ', None, line=71, col=37)
Token(T_Id, 'swap', None, line=71, col=38)
Token(T_LP, '(', None, line=71, col=42)
Token(T_Decimal, '8', 8, line=71, col=43)
Token(T_Comma, ',', None, line=71, col=44)
Token(T_Whitespace, ' ', None, line=71, col=45)
Token(T_Decimal, '42', 42, line=71, col=46)
Token(T_RP, ')', None, line=71, col=48)
Token(T_Semicolon, ';', None, line=71, col=49)
Token(T_Whitespace, '
    ', None, line=71, col=50)
Token(T_Print, 'println!', None, line=72, col=5)
Token(T_LP, '(', None, line=72, col=13)
Token(T_String, '"after swap: a = {}, b = {}"', None, line=72, col=14)
Token(T_Comma, ',', None, line=72, col=42)
Token(T_Whitespace, ' ', None, line=72, col=43)
Token(T_Id, 'new_a', None, line=72, col=44)
Token(T_Comma, ',', None, line=72, col=49)
Token(T_Whitespace, ' ', None, line=72, col=50)
Token(T_Id, 'new_b', None, line=72, col=51)
Token(T_RP, ')', None, line=72, col=56)
Token(T_Semicolon, ';', None, line=72, col=57)
Token(T_Whitespace, '

    ', None, line=72, col=58)
Token(T_Comment, '// tuple destructuring
', None, line=74, col=5)
Token(T_Whitespace, '    ', None, line=75, col=1)
Token(T_Let, 'let', None, line=75, col=5)
Token(T_Whitespace, ' ', None, line=75, col=8)
Token(T_Id, 'pair', None, line=75, col=9)
Token(T_Colon, ':', None, line=75, col=13)
Token(T_Whitespace, ' ', None, line=75, col=14)
Token(T_LP, '(', None, line=75, col=15)
Token(T_Int, 'i32', None, line=75, col=16)
Token(T_Comma, ',', None, line=75, col=19)
Token(T_Whitespace, ' ', None, line=75, col=20)
Token(T_Int, 'i32', None, line=75, col=21)
Token(T_RP, ')', None, line=75, col=24)
Token(T_Whitespace, ' ', None, line=75, col=25)
Token(T_Assign, '=', None, line=75, col=26)
Token(T_Whitespace, ' ', None, line=75, col=27)
Token(T_LP, '(', None, line=75, col=28)
Token(T_Decimal, '100', 100, line=75, col=29)
Token(T_Comma, ',', None, line=75, col=32)
Token(T_Whitespace, ' ', None, line=75, col=33)
Token(T_Decimal, '200', 200, line=75, col=34)
Token(T_RP, ')', None, line=75, col=37)
Token(T_Semicolon, ';', None, line=75, col=38)
Token(T_Whitespace, '
    ', None, line=75, col=39)
Token(T_Let, 'let', None, line=76, col=5)
Token(T_Whitespace, ' ', None, line=76, col=8)
Token(T_LP, '(', None, line=76, col=9)
Token(T_Id, 'p', None, line=76, col=10)
Token(T_Comma, ',', None, line=76, col=11)
Token(T_Whitespace, ' ', None, line=76, col=12)
Token(T_Id, 'q', None, line=76, col=13)
Token(T_RP, ')', None, line=76, col=14)
Token(T_Whitespace, ' ', None, line=76, col=15)
Token(T_Assign, '=', None, line=76, col=16)
Token(T_Whitespace, ' ', None, line=76, col=17)
Token(T_Id, 'pair', None, line=76, col=18)
Token(T_Semicolon, ';', None, line=76, col=22)
Token(T_Whitespace, '
    ', None, line=76, col=23)
Token(T_Print, 'println!', None, line=77, col=5)
Token(T_LP, '(', None, line=77, col=13)
Token(T_String, '"pair p = {}, q = {}"', None, line=77, col=14)
Token(T_Comma, ',', None, line=77, col=35)
Token(T_Whitespace, ' ', None, line=77, col=36)
Token(T_Id, 'p', None, line=77, col=37)
Token(T_Comma, ',', None, line=77, col=38)
Token(T_Whitespace, ' ', None, line=77, col=39)
Token(T_Id, 'q', None, line=77, col=40)
Token(T_RP, ')', None, line=77, col=41)
Token(T_Semicolon, ';', None, line=77, col=42)
Token(T_Whitespace, '

    ', None, line=77, col=43)
Token(T_Comment, '// another tuple
', None, line=79, col=5)
Token(T_Whitespace, '    ', None, line=80, col=1)
Token(T_Let, 'let', None, line=80, col=5)
Token(T_Whitespace, ' ', None, line=80, col=8)
Token(T_Id, 'triple', None, line=80, col=9)
Token(T_Colon, ':', None, line=80, col=15)
Token(T_Whitespace, ' ', None, line=80, col=16)
Token(T_LP, '(', None, line=80, col=17)
Token(T_Int, 'i32', None, line=80, col=18)
Token(T_Comma, ',', None, line=80, col=21)
Token(T_Whitespace, ' ', None, line=80, col=22)
Token(T_Bool, 'bool', None, line=80, col=23)
Token(T_Comma, ',', None, line=80, col=27)
Token(T_Whitespace, ' ', None, line=80, col=28)
Token(T_Int, 'i32', None, line=80, col=29)
Token(T_RP, ')', None, line=80, col=32)
Token(T_Whitespace, ' ', None, line=80, col=33)
Token(T_Assign, '=', None, line=80, col=34)
Token(T_Whitespace, ' ', None, line=80, col=35)
Token(T_LP, '(', None, line=80, col=36)
Token(T_Decimal, '5', 5, line=80, col=37)
Token(T_Comma, ',', None, line=80, col=38)
Token(T_Whitespace, ' ', None, line=80, col=39)
Token(T_False, 'false', None, line=80, col=40)
Token(T_Comma, ',', None, line=80, col=45)
Token(T_Whitespace, ' ', None, line=80, col=46)
Token(T_Decimal, '6', 6, line=80, col=47)
Token(T_RP, ')', None, line=80, col=48)
Token(T_Semicolon, ';', None, line=80, col=49)
Token(T_Whitespace, '
    ', None, line=80, col=50)
Token(T_Let, 'let', None, line=81, col=5)
Token(T_Whitespace, ' ', None, line=81, col=8)
Token(T_LP, '(', None, line=81, col=9)
Token(T_Id, 't1', None, line=81, col=10)
Token(T_Comma, ',', None, line=81, col=12)
Token(T_Whitespace, ' ', None, line=81, col=13)
Token(T_Id, 't_flag', None, line=81, col=14)
Token(T_Comma, ',', None, line=81, col=20)
Token(T_Whitespace, ' ', None, line=81, col=21)
Token(T_Id, 't2', None, line=81, col=22)
Token(T_RP, ')', None, line=81, col=24)
Token(T_Whitespace, ' ', None, line=81, col=25)
Token(T_Assign, '=', None, line=81, col=26)
Token(T_Whitespace, ' ', None, line=81, col=27)
Token(T_Id, 'triple', None, line=81, col=28)
Token(T_Semicolon, ';', None, line=81, col=34)
Token(T_Whitespace, '
    ', None, line=81, col=35)
Token(T_Print, 'println!', None, line=82, col=5)
Token(T_LP, '(', None, line=82, col=13)
Token(T_Whitespace, '
        ', None, line=82, col=14)
Token(T_String, '"triple: t1 = {}, flag = {}, t2 = {}"', None, line=83, col=9)
Token(T_Comma, ',', None, line=83, col=46)
Token(T_Whitespace, '
        ', None, line=83, col=47)
Token(T_Id, 't1', None, line=84, col=9)
Token(T_Comma, ',', None, line=84, col=11)
Token(T_Whitespace, ' ', None, line=84, col=12)
Token(T_Id, 't_flag', None, line=84, col=13)
Token(T_Comma, ',', None, line=84, col=19)
Token(T_Whitespace, ' ', None, line=84, col=20)
Token(T_Id, 't2', None, line=84, col=21)
Token(T_Whitespace, '
    ', None, line=84, col=23)
Token(T_RP, ')', None, line=85, col=5)
Token(T_Semicolon, ';', None, line=85, col=6)
Token(T_Whitespace, '

    ', None, line=85, col=7)
Token(T_Print, 'println!', None, line=87, col=5)
Token(T_LP, '(', None, line=87, col=13)
Token(T_String, '"All tests passed."', None, line=87, col=14)
Token(T_RP, ')', None, line=87, col=33)
Token(T_Semicolon, ';', None, line=87, col=34)
Token(T_Whitespace, '
', None, line=87, col=35)
Token(T_RC, '}', None, line=88, col=1)
Token(T_Whitespace, '
', None, line=88, col=2)
Token(T_EOF, '', None, line=89, col=1)

Symbol Table:
counter: [(6, 9), (42, 38), (55, 12), (58, 9), (58, 19), (59, 38)]
limit: [(7, 5), (43, 33), (55, 23)]
flags: [(8, 5), (46, 9), (46, 19), (46, 29)]
message: [(9, 5), (50, 9), (50, 21), (50, 33), (50, 45)]
factorial: [(12, 4), (16, 20), (63, 22)]
n: [(12, 14), (13, 8), (16, 16), (16, 30)]
sum_and_diff: [(21, 4), (67, 18)]
a: [(21, 17), (22, 20), (26, 8), (27, 16), (29, 20)]
b: [(21, 25), (22, 24), (26, 13), (27, 20), (29, 16)]
sum: [(22, 9), (32, 12)]
diff: [(25, 13), (27, 9), (29, 9), (32, 18)]
swap: [(36, 4), (71, 38)]
x: [(36, 9), (37, 16)]
y: [(36, 17), (37, 13)]
main: [(40, 4)]
fact5: [(63, 9), (64, 25)]
s: [(67, 9), (68, 40)]
new_a: [(71, 10), (72, 44)]
new_b: [(71, 17), (72, 51)]
pair: [(75, 9), (76, 18)]
p: [(76, 10), (77, 37)]
q: [(76, 13), (77, 40)]
triple: [(80, 9), (81, 28)]
t1: [(81, 10), (84, 9)]
t_flag: [(81, 14), (84, 13)]
t2: [(81, 22), (84, 21)]
