Token(T_Comment, '// === Multiâ€‘purpose Trust test ===
', None, line=1, col=1)
Token(T_Whitespace, '
', None, line=2, col=1)
Token(T_Comment, '// 1) Variable declarations with mutability
', None, line=3, col=1)
Token(T_Let, 'let', None, line=4, col=1)
Token(T_Whitespace, ' ', None, line=4, col=4)
Token(T_Id, 'count', None, line=4, col=5)
Token(T_Colon, ':', None, line=4, col=10)
Token(T_Whitespace, ' ', None, line=4, col=11)
Token(T_Int, 'i32', None, line=4, col=12)
Token(T_Whitespace, ' ', None, line=4, col=15)
Token(T_Assign, '=', None, line=4, col=16)
Token(T_Whitespace, ' ', None, line=4, col=17)
Token(T_Decimal, '42', 42, line=4, col=18)
Token(T_Semicolon, ';', None, line=4, col=20)
Token(T_Whitespace, '
', None, line=4, col=21)
Token(T_Let, 'let', None, line=5, col=1)
Token(T_Whitespace, ' ', None, line=5, col=4)
Token(T_Id, '_hex', None, line=5, col=5)
Token(T_Colon, ':', None, line=5, col=9)
Token(T_Whitespace, ' ', None, line=5, col=10)
Token(T_Int, 'i32', None, line=5, col=11)
Token(T_Whitespace, ' ', None, line=5, col=14)
Token(T_Assign, '=', None, line=5, col=15)
Token(T_Whitespace, ' ', None, line=5, col=16)
Token(T_Hexadecimal, '0x1F4', 500, line=5, col=17)
Token(T_Semicolon, ';', None, line=5, col=22)
Token(T_Whitespace, '     ', None, line=5, col=23)
Token(T_Comment, '// 0x1F4 == 500 decimal
', None, line=5, col=28)
Token(T_Mut, 'mut', None, line=6, col=1)
Token(T_Whitespace, ' ', None, line=6, col=4)
Token(T_Id, 'flag', None, line=6, col=5)
Token(T_Colon, ':', None, line=6, col=9)
Token(T_Whitespace, ' ', None, line=6, col=10)
Token(T_Bool, 'bool', None, line=6, col=11)
Token(T_Whitespace, ' ', None, line=6, col=15)
Token(T_Assign, '=', None, line=6, col=16)
Token(T_Whitespace, ' ', None, line=6, col=17)
Token(T_True, 'true', None, line=6, col=18)
Token(T_Semicolon, ';', None, line=6, col=22)
Token(T_Whitespace, '

', None, line=6, col=23)
Token(T_Comment, '// 2) Simple function, nested control, comments
', None, line=8, col=1)
Token(T_Fn, 'fn', None, line=9, col=1)
Token(T_Whitespace, ' ', None, line=9, col=3)
Token(T_Id, 'fib', None, line=9, col=4)
Token(T_LP, '(', None, line=9, col=7)
Token(T_Id, 'n', None, line=9, col=8)
Token(T_Colon, ':', None, line=9, col=9)
Token(T_Whitespace, ' ', None, line=9, col=10)
Token(T_Int, 'i32', None, line=9, col=11)
Token(T_RP, ')', None, line=9, col=14)
Token(T_Whitespace, ' ', None, line=9, col=15)
Token(T_Arrow, '->', None, line=9, col=16)
Token(T_Whitespace, ' ', None, line=9, col=18)
Token(T_Int, 'i32', None, line=9, col=19)
Token(T_Whitespace, ' ', None, line=9, col=22)
Token(T_LC, '{', None, line=9, col=23)
Token(T_Whitespace, '
    ', None, line=9, col=24)
Token(T_Comment, '// iterative Fibonacci
', None, line=10, col=5)
Token(T_Whitespace, '    ', None, line=11, col=1)
Token(T_Let, 'let', None, line=11, col=5)
Token(T_Whitespace, ' ', None, line=11, col=8)
Token(T_Mut, 'mut', None, line=11, col=9)
Token(T_Whitespace, ' ', None, line=11, col=12)
Token(T_Id, 'a', None, line=11, col=13)
Token(T_Colon, ':', None, line=11, col=14)
Token(T_Whitespace, ' ', None, line=11, col=15)
Token(T_Int, 'i32', None, line=11, col=16)
Token(T_Whitespace, ' ', None, line=11, col=19)
Token(T_Assign, '=', None, line=11, col=20)
Token(T_Whitespace, ' ', None, line=11, col=21)
Token(T_Decimal, '0', 0, line=11, col=22)
Token(T_Semicolon, ';', None, line=11, col=23)
Token(T_Whitespace, '
    ', None, line=11, col=24)
Token(T_Let, 'let', None, line=12, col=5)
Token(T_Whitespace, ' ', None, line=12, col=8)
Token(T_Mut, 'mut', None, line=12, col=9)
Token(T_Whitespace, ' ', None, line=12, col=12)
Token(T_Id, 'b', None, line=12, col=13)
Token(T_Colon, ':', None, line=12, col=14)
Token(T_Whitespace, ' ', None, line=12, col=15)
Token(T_Int, 'i32', None, line=12, col=16)
Token(T_Whitespace, ' ', None, line=12, col=19)
Token(T_Assign, '=', None, line=12, col=20)
Token(T_Whitespace, ' ', None, line=12, col=21)
Token(T_Decimal, '1', 1, line=12, col=22)
Token(T_Semicolon, ';', None, line=12, col=23)
Token(T_Whitespace, '
    ', None, line=12, col=24)
Token(T_Let, 'let', None, line=13, col=5)
Token(T_Whitespace, ' ', None, line=13, col=8)
Token(T_Mut, 'mut', None, line=13, col=9)
Token(T_Whitespace, ' ', None, line=13, col=12)
Token(T_Id, 'i', None, line=13, col=13)
Token(T_Colon, ':', None, line=13, col=14)
Token(T_Whitespace, ' ', None, line=13, col=15)
Token(T_Int, 'i32', None, line=13, col=16)
Token(T_Whitespace, ' ', None, line=13, col=19)
Token(T_Assign, '=', None, line=13, col=20)
Token(T_Whitespace, ' ', None, line=13, col=21)
Token(T_Decimal, '0', 0, line=13, col=22)
Token(T_Semicolon, ';', None, line=13, col=23)
Token(T_Whitespace, '
    ', None, line=13, col=24)
Token(T_Loop, 'loop', None, line=14, col=5)
Token(T_Whitespace, ' ', None, line=14, col=9)
Token(T_LC, '{', None, line=14, col=10)
Token(T_Whitespace, '
        ', None, line=14, col=11)
Token(T_If, 'if', None, line=15, col=9)
Token(T_Whitespace, ' ', None, line=15, col=11)
Token(T_Id, 'i', None, line=15, col=12)
Token(T_Whitespace, ' ', None, line=15, col=13)
Token(T_ROp_GE, '>=', None, line=15, col=14)
Token(T_Whitespace, ' ', None, line=15, col=16)
Token(T_Id, 'n', None, line=15, col=17)
Token(T_Whitespace, ' ', None, line=15, col=18)
Token(T_LC, '{', None, line=15, col=19)
Token(T_Whitespace, '
            ', None, line=15, col=20)
Token(T_Break, 'break', None, line=16, col=13)
Token(T_Semicolon, ';', None, line=16, col=18)
Token(T_Whitespace, '
        ', None, line=16, col=19)
Token(T_RC, '}', None, line=17, col=9)
Token(T_Whitespace, '
        ', None, line=17, col=10)
Token(T_Let, 'let', None, line=18, col=9)
Token(T_Whitespace, ' ', None, line=18, col=12)
Token(T_Id, 'tmp', None, line=18, col=13)
Token(T_Colon, ':', None, line=18, col=16)
Token(T_Whitespace, ' ', None, line=18, col=17)
Token(T_Int, 'i32', None, line=18, col=18)
Token(T_Whitespace, ' ', None, line=18, col=21)
Token(T_Assign, '=', None, line=18, col=22)
Token(T_Whitespace, ' ', None, line=18, col=23)
Token(T_Id, 'a', None, line=18, col=24)
Token(T_Whitespace, ' ', None, line=18, col=25)
Token(T_AOp_Trust, '+', None, line=18, col=26)
Token(T_Whitespace, ' ', None, line=18, col=27)
Token(T_Id, 'b', None, line=18, col=28)
Token(T_Semicolon, ';', None, line=18, col=29)
Token(T_Whitespace, '
        ', None, line=18, col=30)
Token(T_Id, 'a', None, line=19, col=9)
Token(T_Whitespace, ' ', None, line=19, col=10)
Token(T_Assign, '=', None, line=19, col=11)
Token(T_Whitespace, ' ', None, line=19, col=12)
Token(T_Id, 'b', None, line=19, col=13)
Token(T_Semicolon, ';', None, line=19, col=14)
Token(T_Whitespace, '
        ', None, line=19, col=15)
Token(T_Id, 'b', None, line=20, col=9)
Token(T_Whitespace, ' ', None, line=20, col=10)
Token(T_Assign, '=', None, line=20, col=11)
Token(T_Whitespace, ' ', None, line=20, col=12)
Token(T_Id, 'tmp', None, line=20, col=13)
Token(T_Semicolon, ';', None, line=20, col=16)
Token(T_Whitespace, '
        ', None, line=20, col=17)
Token(T_Id, 'i', None, line=21, col=9)
Token(T_Whitespace, ' ', None, line=21, col=10)
Token(T_Assign, '=', None, line=21, col=11)
Token(T_Whitespace, ' ', None, line=21, col=12)
Token(T_Id, 'i', None, line=21, col=13)
Token(T_Whitespace, ' ', None, line=21, col=14)
Token(T_AOp_Trust, '+', None, line=21, col=15)
Token(T_Whitespace, ' ', None, line=21, col=16)
Token(T_Decimal, '1', 1, line=21, col=17)
Token(T_Semicolon, ';', None, line=21, col=18)
Token(T_Whitespace, '
    ', None, line=21, col=19)
Token(T_RC, '}', None, line=22, col=5)
Token(T_Whitespace, '
    ', None, line=22, col=6)
Token(T_Return, 'return', None, line=23, col=5)
Token(T_Whitespace, ' ', None, line=23, col=11)
Token(T_Id, 'a', None, line=23, col=12)
Token(T_Semicolon, ';', None, line=23, col=13)
Token(T_Whitespace, '
', None, line=23, col=14)
Token(T_RC, '}', None, line=24, col=1)
Token(T_Whitespace, '

', None, line=24, col=2)
Token(T_Comment, '// 3) String literals and escape sequences
', None, line=26, col=1)
Token(T_Let, 'let', None, line=27, col=1)
Token(T_Whitespace, ' ', None, line=27, col=4)
Token(T_Id, 'msg', None, line=27, col=5)
Token(T_Colon, ':', None, line=27, col=8)
Token(T_Whitespace, ' ', None, line=27, col=9)
Token(T_LB, '[', None, line=27, col=10)
Token(T_Int, 'i32', None, line=27, col=11)
Token(T_RB, ']', None, line=27, col=14)
Token(T_Whitespace, ' ', None, line=27, col=15)
Token(T_Assign, '=', None, line=27, col=16)
Token(T_Whitespace, ' ', None, line=27, col=17)
Token(T_LB, '[', None, line=27, col=18)
Token(T_Decimal, '1', 1, line=27, col=19)
Token(T_Comma, ',', None, line=27, col=20)
Token(T_Whitespace, ' ', None, line=27, col=21)
Token(T_Decimal, '2', 2, line=27, col=22)
Token(T_Comma, ',', None, line=27, col=23)
Token(T_Whitespace, ' ', None, line=27, col=24)
Token(T_Decimal, '3', 3, line=27, col=25)
Token(T_RB, ']', None, line=27, col=26)
Token(T_Semicolon, ';', None, line=27, col=27)
Token(T_Whitespace, '
', None, line=27, col=28)
Token(T_Print, 'println!', None, line=28, col=1)
Token(T_LP, '(', None, line=28, col=9)
Token(T_String, '"Result for {}\n"', None, line=28, col=10)
Token(T_Comma, ',', None, line=28, col=27)
Token(T_Whitespace, ' ', None, line=28, col=28)
Token(T_Id, 'fib', None, line=28, col=29)
Token(T_LP, '(', None, line=28, col=32)
Token(T_Decimal, '10', 10, line=28, col=33)
Token(T_RP, ')', None, line=28, col=35)
Token(T_RP, ')', None, line=28, col=36)
Token(T_Semicolon, ';', None, line=28, col=37)
Token(T_Whitespace, '
', None, line=28, col=38)
Token(T_Print, 'println!', None, line=29, col=1)
Token(T_LP, '(', None, line=29, col=9)
Token(T_String, '"Hex value: \"0x{:X}\""', None, line=29, col=10)
Token(T_Comma, ',', None, line=29, col=33)
Token(T_Whitespace, ' ', None, line=29, col=34)
Token(T_Id, '_hex', None, line=29, col=35)
Token(T_RP, ')', None, line=29, col=39)
Token(T_Semicolon, ';', None, line=29, col=40)
Token(T_Whitespace, '

', None, line=29, col=41)
Token(T_Comment, '// 4) Logical & relational operators in complex expression
', None, line=31, col=1)
Token(T_If, 'if', None, line=32, col=1)
Token(T_Whitespace, ' ', None, line=32, col=3)
Token(T_LP, '(', None, line=32, col=4)
Token(T_Id, 'count', None, line=32, col=5)
Token(T_Whitespace, ' ', None, line=32, col=10)
Token(T_ROp_G, '>', None, line=32, col=11)
Token(T_Whitespace, ' ', None, line=32, col=12)
Token(T_Decimal, '0', 0, line=32, col=13)
Token(T_Whitespace, ' ', None, line=32, col=14)
Token(T_LOp_AND, '&&', None, line=32, col=15)
Token(T_Whitespace, ' ', None, line=32, col=17)
Token(T_Id, 'flag', None, line=32, col=18)
Token(T_RP, ')', None, line=32, col=22)
Token(T_Whitespace, ' ', None, line=32, col=23)
Token(T_LOp_OR, '||', None, line=32, col=24)
Token(T_Whitespace, ' ', None, line=32, col=26)
Token(T_LOp_NOT, '!', None, line=32, col=27)
Token(T_LP, '(', None, line=32, col=28)
Token(T_Id, 'count', None, line=32, col=29)
Token(T_Whitespace, ' ', None, line=32, col=34)
Token(T_ROp_E, '==', None, line=32, col=35)
Token(T_Whitespace, ' ', None, line=32, col=37)
Token(T_Decimal, '42', 42, line=32, col=38)
Token(T_RP, ')', None, line=32, col=40)
Token(T_Whitespace, ' ', None, line=32, col=41)
Token(T_LC, '{', None, line=32, col=42)
Token(T_Whitespace, '
    ', None, line=32, col=43)
Token(T_Comment, '// Do nothing
', None, line=33, col=5)
Token(T_RC, '}', None, line=34, col=1)
Token(T_Whitespace, '

', None, line=34, col=2)
Token(T_Comment, '// 5) Array access, indexing, parentheses, and semicolons
', None, line=36, col=1)
Token(T_Let, 'let', None, line=37, col=1)
Token(T_Whitespace, ' ', None, line=37, col=4)
Token(T_Id, 'element', None, line=37, col=5)
Token(T_Colon, ':', None, line=37, col=12)
Token(T_Whitespace, ' ', None, line=37, col=13)
Token(T_Int, 'i32', None, line=37, col=14)
Token(T_Whitespace, ' ', None, line=37, col=17)
Token(T_Assign, '=', None, line=37, col=18)
Token(T_Whitespace, ' ', None, line=37, col=19)
Token(T_Id, 'msg', None, line=37, col=20)
Token(T_LB, '[', None, line=37, col=23)
Token(T_Decimal, '1', 1, line=37, col=24)
Token(T_RB, ']', None, line=37, col=25)
Token(T_Semicolon, ';', None, line=37, col=26)
Token(T_Whitespace, '
', None, line=37, col=27)
Token(T_Print, 'println!', None, line=38, col=1)
Token(T_LP, '(', None, line=38, col=9)
Token(T_String, '"Second element is {}"', None, line=38, col=10)
Token(T_Comma, ',', None, line=38, col=32)
Token(T_Whitespace, ' ', None, line=38, col=33)
Token(T_Id, 'element', None, line=38, col=34)
Token(T_RP, ')', None, line=38, col=41)
Token(T_Semicolon, ';', None, line=38, col=42)
Token(T_Whitespace, '

', None, line=38, col=43)
Token(T_Comment, '// 6) Edgeâ€‘case: standalone operators and whitespace
', None, line=40, col=1)
Token(T_Comment, '//   + - * / % < > <= >= == != && || ! : -> , ; ( ) { } [ ]
', None, line=41, col=1)
Token(T_EOF, '', None, line=42, col=1)

Symbol Table:
count: [(4, 5), (32, 5), (32, 29)]
_hex: [(5, 5), (29, 35)]
flag: [(6, 5), (32, 18)]
fib: [(9, 4), (28, 29)]
n: [(9, 8), (15, 17)]
a: [(11, 13), (18, 24), (19, 9), (23, 12)]
b: [(12, 13), (18, 28), (19, 13), (20, 9)]
i: [(13, 13), (15, 12), (21, 9), (21, 13)]
tmp: [(18, 13), (20, 13)]
msg: [(27, 5), (37, 20)]
element: [(37, 5), (38, 34)]
