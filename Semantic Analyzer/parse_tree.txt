└── Program
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── MutKw: 'mut'
    │   ├── Pattern
    │   │   └── VarPattern: 'counter'
    │   ├── Colon: ':'
    │   ├── Type
    │   │   └── TypeI32: 'i32'
    │   ├── Assign: '='
    │   └── Expr
    │       └── Number: '0'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'limit'
    │   ├── Colon: ':'
    │   ├── Type
    │   │   └── TypeI32: 'i32'
    │   ├── Assign: '='
    │   └── Expr
    │       └── Number: '5'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'flags'
    │   ├── Colon: ':'
    │   ├── Type
    │   │   └── ArrayType
    │   │       ├── TypeBool: 'bool'
    │   │       └── Size: '3'
    │   ├── Assign: '='
    │   └── Expr
    │       └── ArrayLiteral
    │           ├── BoolLiteral: 'true'
    │           ├── BoolLiteral: 'false'
    │           └── BoolLiteral: 'true'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'message'
    │   ├── Colon: ':'
    │   ├── Type
    │   │   └── ArrayType
    │   │       ├── TypeI32: 'i32'
    │   │       └── Size: '4'
    │   ├── Assign: '='
    │   └── Expr
    │       └── ArrayLiteral
    │           ├── Number: '10'
    │           ├── Number: '20'
    │           ├── Number: '30'
    │           └── Number: '40'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'factorial'
    │   ├── Params
    │   │   └── Param
    │   │       ├── VarPattern: 'n'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           └── IfStmt
    │               ├── IfKw: 'if'
    │               ├── Cond
    │               │   └── BinaryOp: '<='
    │               │       ├── Id: 'n'
    │               │       └── Number: '1'
    │               ├── Then
    │               │   └── Block
    │               │       └── ReturnStmt: 'return'
    │               │           └── Number: '1'
    │               ├── ElseKw: 'else'
    │               └── Else
    │                   └── Block
    │                       └── ReturnStmt: 'return'
    │                           └── BinaryOp: '*'
    │                               ├── Id: 'n'
    │                               └── Call: 'factorial'
    │                                   └── BinaryOp: '-'
    │                                       ├── Id: 'n'
    │                                       └── Number: '1'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'sum_and_diff'
    │   ├── Params
    │   │   ├── Param
    │   │   │   ├── VarPattern: 'a'
    │   │   │   └── Type
    │   │   │       └── TypeI32: 'i32'
    │   │   └── Param
    │   │       ├── VarPattern: 'b'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'sum'
    │           │   ├── Colon: ':'
    │           │   ├── Type
    │           │   │   └── TypeI32: 'i32'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── BinaryOp: '+'
    │           │           ├── Id: 'a'
    │           │           └── Id: 'b'
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── MutKw: 'mut'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'diff'
    │           │   ├── Colon: ':'
    │           │   └── Type
    │           │       └── TypeI32: 'i32'
    │           ├── IfStmt
    │           │   ├── IfKw: 'if'
    │           │   ├── Cond
    │           │   │   └── BinaryOp: '>='
    │           │   │       ├── Id: 'a'
    │           │   │       └── Id: 'b'
    │           │   ├── Then
    │           │   │   └── Block
    │           │   │       └── AssignStmt
    │           │   │           ├── LValue
    │           │   │           │   └── Id: 'diff'
    │           │   │           ├── Assign: '='
    │           │   │           └── Expr
    │           │   │               └── BinaryOp: '-'
    │           │   │                   ├── Id: 'a'
    │           │   │                   └── Id: 'b'
    │           │   ├── ElseKw: 'else'
    │           │   └── Else
    │           │       └── Block
    │           │           └── AssignStmt
    │           │               ├── LValue
    │           │               │   └── Id: 'diff'
    │           │               ├── Assign: '='
    │           │               └── Expr
    │           │                   └── BinaryOp: '-'
    │           │                       ├── Id: 'b'
    │           │                       └── Id: 'a'
    │           └── ReturnStmt: 'return'
    │               └── BinaryOp: '+'
    │                   ├── Id: 'sum'
    │                   └── Id: 'diff'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'swap'
    │   ├── Params
    │   │   ├── Param
    │   │   │   ├── VarPattern: 'x'
    │   │   │   └── Type
    │   │   │       └── TypeI32: 'i32'
    │   │   └── Param
    │   │       ├── VarPattern: 'y'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TupleType
    │   │           ├── TypeI32: 'i32'
    │   │           └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           └── ReturnStmt: 'return'
    │               └── TupleLiteral
    │                   ├── Id: 'y'
    │                   └── Id: 'x'
    └── FunctionDecl
        ├── FnKw: 'fn'
        ├── Id: 'main'
        ├── Params
        └── Body
            └── Block
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"Initial counter = {}"'
                │   └── Expr
                │       └── Id: 'counter'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"limit = {}"'
                │   └── Expr
                │       └── Id: 'limit'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"flags = {}, {}, {}"'
                │   ├── Expr
                │   │   └── ArrayIndex: 'flags'
                │   │       └── Number: '1'
                │   ├── Expr
                │   │   └── ArrayIndex: 'flags'
                │   │       └── Number: '1'
                │   └── Expr
                │       └── ArrayIndex: 'flags'
                │           └── Number: '2'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"message = {}, {}, {}, {}"'
                │   ├── Expr
                │   │   └── ArrayIndex: 'message'
                │   │       └── Number: '1'
                │   ├── Expr
                │   │   └── ArrayIndex: 'message'
                │   │       └── Number: '1'
                │   ├── Expr
                │   │   └── ArrayIndex: 'message'
                │   │       └── Number: '2'
                │   └── Expr
                │       └── ArrayIndex: 'message'
                │           └── Number: '3'
                ├── LoopStmt
                │   ├── LoopKw: 'loop'
                │   └── Block
                │       └── Block
                │           ├── IfStmt
                │           │   ├── IfKw: 'if'
                │           │   ├── Cond
                │           │   │   └── BinaryOp: '>='
                │           │   │       ├── Id: 'counter'
                │           │   │       └── Id: 'limit'
                │           │   └── Then
                │           │       └── Block
                │           │           └── BreakStmt: 'break'
                │           ├── AssignStmt
                │           │   ├── LValue
                │           │   │   └── Id: 'counter'
                │           │   ├── Assign: '='
                │           │   └── Expr
                │           │       └── BinaryOp: '+'
                │           │           ├── Id: 'counter'
                │           │           └── Number: '1'
                │           └── PrintStmt
                │               ├── PrintKw: 'println!'
                │               ├── FormatStr: '"Counter now = {}"'
                │               └── Expr
                │                   └── Id: 'counter'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'fact5'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'factorial'
                │           └── Number: '5'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"5! = {}"'
                │   └── Expr
                │       └── Id: 'fact5'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 's'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'sum_and_diff'
                │           ├── Number: '7'
                │           └── Number: '3'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"sum+diff of (7,3) = {}"'
                │   └── Expr
                │       └── Id: 's'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── TuplePattern
                │   │       ├── VarPattern: 'new_a'
                │   │       └── VarPattern: 'new_b'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TupleType
                │   │       ├── TypeI32: 'i32'
                │   │       └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'swap'
                │           ├── Number: '8'
                │           └── Number: '42'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"after swap: a = {}, b = {}"'
                │   ├── Expr
                │   │   └── Id: 'new_a'
                │   └── Expr
                │       └── Id: 'new_b'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'pair'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TupleType
                │   │       ├── TypeI32: 'i32'
                │   │       └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── TupleLiteral
                │           ├── Number: '100'
                │           └── Number: '200'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── TuplePattern
                │   │       ├── VarPattern: 'p'
                │   │       └── VarPattern: 'q'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Id: 'pair'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"pair p = {}, q = {}"'
                │   ├── Expr
                │   │   └── Id: 'p'
                │   └── Expr
                │       └── Id: 'q'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'triple'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TupleType
                │   │       ├── TypeI32: 'i32'
                │   │       ├── TypeBool: 'bool'
                │   │       └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── TupleLiteral
                │           ├── Number: '5'
                │           ├── BoolLiteral: 'false'
                │           └── Number: '6'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── TuplePattern
                │   │       ├── VarPattern: 't1'
                │   │       ├── VarPattern: 't_flag'
                │   │       └── VarPattern: 't2'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Id: 'triple'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"triple: t1 = {}, flag = {}, t2 = {}"'
                │   ├── Expr
                │   │   └── Id: 't1'
                │   ├── Expr
                │   │   └── Id: 't_flag'
                │   └── Expr
                │       └── Id: 't2'
                └── PrintStmt
                    ├── PrintKw: 'println!'
                    └── FormatStr: '"All tests passed."'