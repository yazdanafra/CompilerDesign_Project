└── Program
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'is_even'
    │   ├── Params
    │   │   └── Param
    │   │       ├── VarPattern: 'x'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeBool: 'bool'
    │   └── Body
    │       └── Block
    │           └── ReturnStmt: 'return'
    │               └── BinaryOp: '=='
    │                   ├── BinaryOp: '%'
    │                   │   ├── Id: 'x'
    │                   │   └── Number: '2'
    │                   └── Number: '0'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'sum_array'
    │   ├── Params
    │   │   └── Param
    │   │       ├── VarPattern: 'a'
    │   │       └── Type
    │   │           └── ArrayType
    │   │               ├── TypeI32: 'i32'
    │   │               └── Size: '5'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── MutKw: 'mut'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'total'
    │           │   ├── Colon: ':'
    │           │   ├── Type
    │           │   │   └── TypeI32: 'i32'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── Number: '0'
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── MutKw: 'mut'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'i'
    │           │   ├── Colon: ':'
    │           │   ├── Type
    │           │   │   └── TypeI32: 'i32'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── Number: '0'
    │           ├── LoopStmt
    │           │   ├── LoopKw: 'loop'
    │           │   └── Block
    │           │       └── Block
    │           │           ├── IfStmt
    │           │           │   ├── IfKw: 'if'
    │           │           │   ├── Cond
    │           │           │   │   └── BinaryOp: '=='
    │           │           │   │       ├── Id: 'i'
    │           │           │   │       └── Number: '5'
    │           │           │   └── Then
    │           │           │       └── Block
    │           │           │           └── BreakStmt: 'break'
    │           │           ├── AssignStmt
    │           │           │   ├── LValue
    │           │           │   │   └── Id: 'total'
    │           │           │   ├── Assign: '='
    │           │           │   └── Expr
    │           │           │       └── BinaryOp: '+'
    │           │           │           ├── Id: 'total'
    │           │           │           └── ArrayIndex: 'a'
    │           │           │               └── Id: 'i'
    │           │           └── AssignStmt
    │           │               ├── LValue
    │           │               │   └── Id: 'i'
    │           │               ├── Assign: '='
    │           │               └── Expr
    │           │                   └── BinaryOp: '+'
    │           │                       ├── Id: 'i'
    │           │                       └── Number: '1'
    │           └── ReturnStmt: 'return'
    │               └── Id: 'total'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'find_first_even'
    │   ├── Params
    │   │   └── Param
    │   │       ├── VarPattern: 'a'
    │   │       └── Type
    │   │           └── ArrayType
    │   │               ├── TypeI32: 'i32'
    │   │               └── Size: '5'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── MutKw: 'mut'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'i'
    │           │   ├── Colon: ':'
    │           │   ├── Type
    │           │   │   └── TypeI32: 'i32'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── Number: '0'
    │           ├── LoopStmt
    │           │   ├── LoopKw: 'loop'
    │           │   └── Block
    │           │       └── Block
    │           │           ├── IfStmt
    │           │           │   ├── IfKw: 'if'
    │           │           │   ├── Cond
    │           │           │   │   └── BinaryOp: '=='
    │           │           │   │       ├── Id: 'i'
    │           │           │   │       └── Number: '5'
    │           │           │   └── Then
    │           │           │       └── Block
    │           │           │           └── BreakStmt: 'break'
    │           │           ├── IfStmt
    │           │           │   ├── IfKw: 'if'
    │           │           │   ├── Cond
    │           │           │   │   └── Call: 'is_even'
    │           │           │   │       └── ArrayIndex: 'a'
    │           │           │   │           └── Id: 'i'
    │           │           │   └── Then
    │           │           │       └── Block
    │           │           │           └── ReturnStmt: 'return'
    │           │           │               └── Id: 'i'
    │           │           └── AssignStmt
    │           │               ├── LValue
    │           │               │   └── Id: 'i'
    │           │               ├── Assign: '='
    │           │               └── Expr
    │           │                   └── BinaryOp: '+'
    │           │                       ├── Id: 'i'
    │           │                       └── Number: '1'
    │           └── ReturnStmt: 'return'
    │               └── UnaryOp: '-'
    │                   └── Number: '1'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'count_pairs'
    │   ├── Params
    │   │   ├── Param
    │   │   │   ├── VarPattern: 'n'
    │   │   │   └── Type
    │   │   │       └── TypeI32: 'i32'
    │   │   └── Param
    │   │       ├── VarPattern: 'target'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── MutKw: 'mut'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'count'
    │           │   ├── Colon: ':'
    │           │   ├── Type
    │           │   │   └── TypeI32: 'i32'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── Number: '0'
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── MutKw: 'mut'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'i'
    │           │   ├── Colon: ':'
    │           │   ├── Type
    │           │   │   └── TypeI32: 'i32'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── Number: '0'
    │           ├── LoopStmt
    │           │   ├── LoopKw: 'loop'
    │           │   └── Block
    │           │       └── Block
    │           │           ├── IfStmt
    │           │           │   ├── IfKw: 'if'
    │           │           │   ├── Cond
    │           │           │   │   └── BinaryOp: '=='
    │           │           │   │       ├── Id: 'i'
    │           │           │   │       └── Id: 'n'
    │           │           │   └── Then
    │           │           │       └── Block
    │           │           │           └── BreakStmt: 'break'
    │           │           ├── LetDecl
    │           │           │   ├── LetKw: 'let'
    │           │           │   ├── MutKw: 'mut'
    │           │           │   ├── Pattern
    │           │           │   │   └── VarPattern: 'j'
    │           │           │   ├── Colon: ':'
    │           │           │   ├── Type
    │           │           │   │   └── TypeI32: 'i32'
    │           │           │   ├── Assign: '='
    │           │           │   └── Expr
    │           │           │       └── Number: '0'
    │           │           ├── LoopStmt
    │           │           │   ├── LoopKw: 'loop'
    │           │           │   └── Block
    │           │           │       └── Block
    │           │           │           ├── IfStmt
    │           │           │           │   ├── IfKw: 'if'
    │           │           │           │   ├── Cond
    │           │           │           │   │   └── BinaryOp: '=='
    │           │           │           │   │       ├── Id: 'j'
    │           │           │           │   │       └── Id: 'n'
    │           │           │           │   └── Then
    │           │           │           │       └── Block
    │           │           │           │           └── BreakStmt: 'break'
    │           │           │           ├── IfStmt
    │           │           │           │   ├── IfKw: 'if'
    │           │           │           │   ├── Cond
    │           │           │           │   │   └── BinaryOp: '=='
    │           │           │           │   │       ├── BinaryOp: '+'
    │           │           │           │   │       │   ├── Id: 'i'
    │           │           │           │   │       │   └── Id: 'j'
    │           │           │           │   │       └── Id: 'target'
    │           │           │           │   └── Then
    │           │           │           │       └── Block
    │           │           │           │           └── AssignStmt
    │           │           │           │               ├── LValue
    │           │           │           │               │   └── Id: 'count'
    │           │           │           │               ├── Assign: '='
    │           │           │           │               └── Expr
    │           │           │           │                   └── BinaryOp: '+'
    │           │           │           │                       ├── Id: 'count'
    │           │           │           │                       └── Number: '1'
    │           │           │           └── AssignStmt
    │           │           │               ├── LValue
    │           │           │               │   └── Id: 'j'
    │           │           │               ├── Assign: '='
    │           │           │               └── Expr
    │           │           │                   └── BinaryOp: '+'
    │           │           │                       ├── Id: 'j'
    │           │           │                       └── Number: '1'
    │           │           └── AssignStmt
    │           │               ├── LValue
    │           │               │   └── Id: 'i'
    │           │               ├── Assign: '='
    │           │               └── Expr
    │           │                   └── BinaryOp: '+'
    │           │                       ├── Id: 'i'
    │           │                       └── Number: '1'
    │           └── ReturnStmt: 'return'
    │               └── Id: 'count'
    └── FunctionDecl
        ├── FnKw: 'fn'
        ├── Id: 'main'
        ├── Params
        └── Body
            └── Block
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'nums'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── ArrayType
                │   │       ├── TypeI32: 'i32'
                │   │       └── Size: '5'
                │   ├── Assign: '='
                │   └── Expr
                │       └── ArrayLiteral
                │           ├── Number: '3'
                │           ├── Number: '4'
                │           ├── Number: '7'
                │           ├── Number: '8'
                │           └── Number: '10'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   └── FormatStr: '"Array is_even flags:"'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── MutKw: 'mut'
                │   ├── Pattern
                │   │   └── VarPattern: 'k'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Number: '0'
                ├── LoopStmt
                │   ├── LoopKw: 'loop'
                │   └── Block
                │       └── Block
                │           ├── IfStmt
                │           │   ├── IfKw: 'if'
                │           │   ├── Cond
                │           │   │   └── BinaryOp: '=='
                │           │   │       ├── Id: 'k'
                │           │   │       └── Number: '5'
                │           │   └── Then
                │           │       └── Block
                │           │           └── BreakStmt: 'break'
                │           ├── PrintStmt
                │           │   ├── PrintKw: 'println!'
                │           │   ├── FormatStr: '"  {} → {}"'
                │           │   ├── Expr
                │           │   │   └── ArrayIndex: 'nums'
                │           │   │       └── Id: 'k'
                │           │   └── Expr
                │           │       └── Call: 'is_even'
                │           │           └── ArrayIndex: 'nums'
                │           │               └── Id: 'k'
                │           └── AssignStmt
                │               ├── LValue
                │               │   └── Id: 'k'
                │               ├── Assign: '='
                │               └── Expr
                │                   └── BinaryOp: '+'
                │                       ├── Id: 'k'
                │                       └── Number: '1'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'total'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'sum_array'
                │           └── Id: 'nums'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"Sum of array = {}"'
                │   └── Expr
                │       └── Id: 'total'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'idx'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'find_first_even'
                │           └── Id: 'nums'
                ├── IfStmt
                │   ├── IfKw: 'if'
                │   ├── Cond
                │   │   └── BinaryOp: '>='
                │   │       ├── Id: 'idx'
                │   │       └── Number: '0'
                │   ├── Then
                │   │   └── Block
                │   │       └── PrintStmt
                │   │           ├── PrintKw: 'println!'
                │   │           ├── FormatStr: '"First even at index {} (value {})"'
                │   │           ├── Expr
                │   │           │   └── Id: 'idx'
                │   │           └── Expr
                │   │               └── ArrayIndex: 'nums'
                │   │                   └── Id: 'idx'
                │   ├── ElseKw: 'else'
                │   └── Else
                │       └── Block
                │           └── PrintStmt
                │               ├── PrintKw: 'println!'
                │               └── FormatStr: '"No even numbers found"'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'pairs'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'count_pairs'
                │           ├── Number: '5'
                │           └── Number: '7'
                └── PrintStmt
                    ├── PrintKw: 'println!'
                    ├── FormatStr: '"Number of (i,j) in [0..5)² summing to 7 = {}"'
                    └── Expr
                        └── Id: 'pairs'