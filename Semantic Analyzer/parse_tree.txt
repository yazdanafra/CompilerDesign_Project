└── Program
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'factorial'
    │   ├── Params
    │   │   └── Param
    │   │       ├── VarPattern: 'n'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           └── IfStmt
    │               ├── IfKw: 'if'
    │               ├── Cond
    │               │   └── BinaryOp: '<='
    │               │       ├── Id: 'n'
    │               │       └── Number: '1'
    │               ├── Then
    │               │   └── Block
    │               │       └── ReturnStmt: 'return'
    │               │           └── Number: '1'
    │               ├── ElseKw: 'else'
    │               └── Else
    │                   └── Block
    │                       └── ReturnStmt: 'return'
    │                           └── BinaryOp: '*'
    │                               ├── Id: 'n'
    │                               └── Call: 'factorial'
    │                                   └── BinaryOp: '-'
    │                                       ├── Id: 'n'
    │                                       └── Number: '1'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'swap'
    │   ├── Params
    │   │   ├── Param
    │   │   │   ├── VarPattern: 'a'
    │   │   │   └── Type
    │   │   │       └── TypeI32: 'i32'
    │   │   └── Param
    │   │       ├── VarPattern: 'b'
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TupleType
    │   │           ├── TypeI32: 'i32'
    │   │           └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           └── ReturnStmt: 'return'
    │               └── TupleLiteral
    │                   ├── Id: 'b'
    │                   └── Id: 'a'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'print_message'
    │   ├── Params
    │   └── Body
    │       └── Block
    │           └── PrintStmt
    │               ├── PrintKw: 'println!'
    │               └── FormatStr: '"Hello from Trust!"'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'sum_array'
    │   ├── Params
    │   │   └── Param
    │   │       ├── VarPattern: 'arr'
    │   │       └── Type
    │   │           └── ArrayType
    │   │               ├── TypeI32: 'i32'
    │   │               └── Size: '5'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   │   └── Type
    │   │       └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           └── ReturnStmt: 'return'
    │               └── BinaryOp: '+'
    │                   ├── BinaryOp: '+'
    │                   │   ├── BinaryOp: '+'
    │                   │   │   ├── BinaryOp: '+'
    │                   │   │   │   ├── ArrayIndex: 'arr'
    │                   │   │   │   │   └── Number: '1'
    │                   │   │   │   └── ArrayIndex: 'arr'
    │                   │   │   │       └── Number: '2'
    │                   │   │   └── ArrayIndex: 'arr'
    │                   │   │       └── Number: '3'
    │                   │   └── ArrayIndex: 'arr'
    │                   │       └── Number: '4'
    │                   └── ArrayIndex: 'arr'
    │                       └── Number: '5'
    └── FunctionDecl
        ├── FnKw: 'fn'
        ├── Id: 'main'
        ├── Params
        └── Body
            └── Block
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── MutKw: 'mut'
                │   ├── Pattern
                │   │   └── VarPattern: 'x'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Number: '5'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'f'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'factorial'
                │           └── Id: 'x'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"factorial {} = {}"'
                │   ├── Expr
                │   │   └── Id: 'x'
                │   └── Expr
                │       └── Id: 'f'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── TuplePattern
                │   │       ├── VarPattern: 'a'
                │   │       └── VarPattern: 'b'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TupleType
                │   │       ├── TypeI32: 'i32'
                │   │       └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'swap'
                │           ├── Number: '3'
                │           └── Number: '4'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"swap(3,4) = ({}, {})"'
                │   ├── Expr
                │   │   └── Id: 'a'
                │   └── Expr
                │       └── Id: 'b'
                ├── ExprStmt
                │   └── Call: 'print_message'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'arr'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── ArrayType
                │   │       ├── TypeI32: 'i32'
                │   │       └── Size: '5'
                │   ├── Assign: '='
                │   └── Expr
                │       └── ArrayLiteral
                │           ├── Number: '10'
                │           ├── Number: '20'
                │           ├── Number: '30'
                │           ├── Number: '40'
                │           └── Number: '50'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'total'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call: 'sum_array'
                │           └── Id: 'arr'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"sum of array = {}"'
                │   └── Expr
                │       └── Id: 'total'
                ├── IfStmt
                │   ├── IfKw: 'if'
                │   ├── Cond
                │   │   └── BinaryOp: '>'
                │   │       ├── Id: 'total'
                │   │       └── Number: '100'
                │   ├── Then
                │   │   └── Block
                │   │       └── PrintStmt
                │   │           ├── PrintKw: 'println!'
                │   │           ├── FormatStr: '"Total is large: {}"'
                │   │           └── Expr
                │   │               └── Id: 'total'
                │   ├── ElseKw: 'else'
                │   └── Else
                │       └── Block
                │           └── PrintStmt
                │               ├── PrintKw: 'println!'
                │               ├── FormatStr: '"Total is modest: {}"'
                │               └── Expr
                │                   └── Id: 'total'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── MutKw: 'mut'
                │   ├── Pattern
                │   │   └── VarPattern: 'idx'
                │   ├── Colon: ':'
                │   ├── Type
                │   │   └── TypeI32: 'i32'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Number: '1'
                └── LoopStmt
                    ├── LoopKw: 'loop'
                    └── Block
                        └── Block
                            ├── IfStmt
                            │   ├── IfKw: 'if'
                            │   ├── Cond
                            │   │   └── BinaryOp: '>'
                            │   │       ├── Id: 'idx'
                            │   │       └── Number: '3'
                            │   └── Then
                            │       └── Block
                            │           └── BreakStmt: 'break'
                            ├── IfStmt
                            │   ├── IfKw: 'if'
                            │   ├── Cond
                            │   │   └── BinaryOp: '=='
                            │   │       ├── Id: 'idx'
                            │   │       └── Number: '2'
                            │   └── Then
                            │       └── Block
                            │           ├── AssignStmt
                            │           │   ├── LValue
                            │           │   │   └── Id: 'idx'
                            │           │   ├── Assign: '='
                            │           │   └── Expr
                            │           │       └── BinaryOp: '+'
                            │           │           ├── Id: 'idx'
                            │           │           └── Number: '1'
                            │           └── ContinueStmt: 'continue'
                            ├── PrintStmt
                            │   ├── PrintKw: 'println!'
                            │   ├── FormatStr: '"idx = {}"'
                            │   └── Expr
                            │       └── Id: 'idx'
                            └── AssignStmt
                                ├── LValue
                                │   └── Id: 'idx'
                                ├── Assign: '='
                                └── Expr
                                    └── BinaryOp: '+'
                                        ├── Id: 'idx'
                                        └── Number: '1'