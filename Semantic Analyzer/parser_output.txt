└── Program
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'alpha'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── BoolLiteral: 'true'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── MutKw: 'mut'
    │   ├── Pattern
    │   │   └── VarPattern: 'beta'
    │   ├── Assign: '='
    │   └── Expr
    │       └── BoolLiteral: 'false'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'gamma'
    │   ├── Colon: ':'
    │   └── Type
    ├── AssignStmt
    │   ├── LValue
    │   │   └── Id: 'gamma'
    │   ├── Assign: '='
    │   └── Expr
    │       └── Number: '0x10'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'delta'
    │   ├── Assign: '='
    │   └── Expr
    │       └── UnaryOp
    │           └── Number: '15'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'epsilon'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── UnaryOp
    │           └── Number: '15'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 't1'
    │   ├── Assign: '='
    │   └── Expr
    │       └── TupleLiteral
    │           ├── Number: '1'
    │           └── BoolLiteral: 'false'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── MutKw: 'mut'
    │   ├── Pattern
    │   │   └── VarPattern: 't2'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── TupleLiteral
    │           ├── Number: '2'
    │           └── Number: '3'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── TuplePattern
    │   │       ├── VarPattern: 'm1'
    │   │       └── VarPattern: 'm2'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── TupleLiteral
    │           ├── Number: '4'
    │           └── Number: '5'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   └── Pattern
    │       └── VarPattern: '_unused'
    ├── AssignStmt
    │   ├── LValue
    │   │   └── Id: '_unused'
    │   ├── Assign: '='
    │   └── Expr
    │       └── Number: '3'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'mixed'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── ArrayLiteral
    │           ├── Number: '5'
    │           ├── Number: '10'
    │           └── Number: '15'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── Pattern
    │   │   └── VarPattern: 'flags'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── ArrayLiteral
    │           ├── BoolLiteral: 'true'
    │           └── BoolLiteral: 'false'
    ├── LetDecl
    │   ├── LetKw: 'let'
    │   ├── MutKw: 'mut'
    │   ├── Pattern
    │   │   └── VarPattern: 'nums'
    │   ├── Colon: ':'
    │   ├── Type
    │   ├── Assign: '='
    │   └── Expr
    │       └── ArrayLiteral
    │           ├── Number: '0x1'
    │           ├── Number: '0x2'
    │           └── Number: '0x3'
    ├── AssignStmt
    │   ├── LValue
    │   │   └── ArrayIndex
    │   │       ├── Id: 'nums'
    │   │       └── Number: '2'
    │   ├── Assign: '='
    │   └── Expr
    │       └── BinaryOp
    │           ├── ArrayIndex
    │           │   └── Number: '1'
    │           └── BinaryOp
    │               ├── BinaryOp
    │               │   ├── ArrayIndex
    │               │   │   └── Number: '0'
    │               │   └── Number: '2'
    │               └── Number: '5'
    ├── PrintStmt
    │   ├── PrintKw: 'println!'
    │   └── FormatStr: '"Start of test"'
    ├── PrintStmt
    │   ├── PrintKw: 'println!'
    │   ├── FormatStr: '"Hex: {:X}, Dec: {}"'
    │   ├── Expr
    │   │   └── Number: '0xAB'
    │   └── Expr
    │       └── Number: '171'
    ├── PrintStmt
    │   ├── PrintKw: 'println!'
    │   └── FormatStr: '"Escapes:\nLine1\tTabbed"'
    ├── PrintStmt
    │   ├── PrintKw: 'println!'
    │   ├── FormatStr: '"Named: a={a}, b={b}"'
    │   ├── NamedArg
    │   │   └── Value
    │   │       └── Expr
    │   │           └── Id: 'alpha'
    │   └── NamedArg
    │       └── Value
    │           └── Expr
    │               └── Id: 'beta'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'no_return'
    │   ├── Params
    │   │   └── Param
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   └── Body
    │       └── Block
    │           └── PrintStmt
    │               ├── PrintKw: 'println!'
    │               ├── FormatStr: '"No return, x = {x}"'
    │               └── NamedArg
    │                   └── Value
    │                       └── Expr
    │                           └── Id: 'x'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'combine'
    │   ├── Params
    │   │   ├── Param: 'a'
    │   │   └── Param: 'b'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   └── Body
    │       └── Block
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'sum'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── BinaryOp
    │           │           ├── Id: 'a'
    │           │           └── Id: 'b'
    │           ├── LetDecl
    │           │   ├── LetKw: 'let'
    │           │   ├── Pattern
    │           │   │   └── VarPattern: 'flag'
    │           │   ├── Assign: '='
    │           │   └── Expr
    │           │       └── BinaryOp
    │           │           ├── Id: 'sum'
    │           │           └── Number: '0'
    │           └── ReturnStmt
    │               └── TupleLiteral
    │                   ├── Id: 'sum'
    │                   └── Id: 'flag'
    ├── FunctionDecl
    │   ├── FnKw: 'fn'
    │   ├── Id: 'nested'
    │   ├── Params
    │   │   ├── Param
    │   │   │   └── Type
    │   │   │       └── TypeI32: 'i32'
    │   │   └── Param
    │   │       └── Type
    │   │           └── TypeI32: 'i32'
    │   ├── Arrow: '->'
    │   ├── ReturnType
    │   └── Body
    │       └── Block
    │           └── IfStmt
    │               ├── IfKw: 'if'
    │               ├── Cond
    │               │   └── BinaryOp
    │               │       ├── BinaryOp
    │               │       │   ├── Id: 'x'
    │               │       │   └── Id: 'y'
    │               │       └── BinaryOp
    │               │           ├── BinaryOp
    │               │           │   ├── Id: 'y'
    │               │           │   └── Id: 'x'
    │               │           └── UnaryOp
    │               │               └── BoolLiteral: 'false'
    │               ├── Then
    │               │   └── Block
    │               │       ├── LetDecl
    │               │       │   ├── LetKw: 'let'
    │               │       │   ├── Pattern
    │               │       │   │   └── VarPattern: 'res'
    │               │       │   ├── Assign: '='
    │               │       │   └── Expr
    │               │       │       └── BinaryOp
    │               │       │           ├── BinaryOp
    │               │       │           │   ├── Id: 'x'
    │               │       │           │   └── Id: 'y'
    │               │       │           └── Number: '7'
    │               │       └── IfStmt
    │               │           ├── IfKw: 'if'
    │               │           ├── Cond
    │               │           │   └── BinaryOp
    │               │           │       ├── Id: 'res'
    │               │           │       └── Number: '10'
    │               │           ├── Then
    │               │           │   └── Block
    │               │           │       └── ReturnStmt
    │               │           │           └── Id: 'res'
    │               │           ├── ElseKw: 'else'
    │               │           └── Else
    │               │               └── Block
    │               │                   └── ReturnStmt
    │               │                       └── BinaryOp
    │               │                           ├── Id: 'res'
    │               │                           └── Number: '1'
    │               ├── ElseKw: 'else'
    │               └── Else
    │                   └── Block
    │                       └── ReturnStmt
    │                           └── BinaryOp
    │                               ├── Id: 'x'
    │                               └── Id: 'y'
    └── FunctionDecl
        ├── FnKw: 'fn'
        ├── Id: 'main'
        ├── Params
        └── Body
            └── Block
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── MutKw: 'mut'
                │   ├── Pattern
                │   │   └── VarPattern: 'count'
                │   ├── Colon: ':'
                │   ├── Type
                │   ├── Assign: '='
                │   └── Expr
                │       └── Number: '0'
                ├── LoopStmt
                │   ├── LoopKw: 'loop'
                │   └── Block
                │       └── Block
                │           ├── IfStmt
                │           │   ├── IfKw: 'if'
                │           │   ├── Cond
                │           │   │   └── BinaryOp
                │           │   │       ├── Id: 'count'
                │           │   │       └── Number: '3'
                │           │   └── Then
                │           │       └── Block
                │           │           └── BreakStmt: 'break'
                │           ├── AssignStmt
                │           │   ├── LValue
                │           │   │   └── Id: 'count'
                │           │   ├── Assign: '='
                │           │   └── Expr
                │           │       └── BinaryOp
                │           │           ├── Id: 'count'
                │           │           └── Number: '1'
                │           └── ContinueStmt: 'continue'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── MutKw: 'mut'
                │   ├── Pattern
                │   │   └── VarPattern: 'idx'
                │   ├── Colon: ':'
                │   ├── Type
                │   ├── Assign: '='
                │   └── Expr
                │       └── Number: '0'
                ├── LoopStmt
                │   ├── LoopKw: 'loop'
                │   └── Block
                │       └── Block
                │           ├── IfStmt
                │           │   ├── IfKw: 'if'
                │           │   ├── Cond
                │           │   │   └── BinaryOp
                │           │   │       ├── Id: 'idx'
                │           │   │       └── ArrayIndex
                │           │   │           └── Number: '1'
                │           │   └── Then
                │           │       └── Block
                │           │           └── BreakStmt: 'break'
                │           ├── PrintStmt
                │           │   ├── PrintKw: 'println!'
                │           │   ├── FormatStr: '"idx: {0}, beta: {1}"'
                │           │   ├── Expr
                │           │   │   └── Id: 'idx'
                │           │   └── Expr
                │           │       └── Id: 'beta'
                │           └── AssignStmt
                │               ├── LValue
                │               │   └── Id: 'idx'
                │               ├── Assign: '='
                │               └── Expr
                │                   └── BinaryOp
                │                       ├── Id: 'idx'
                │                       └── Number: '1'
                ├── ExprStmt
                │   └── Call
                │       └── Number: '5'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── TuplePattern
                │   │       ├── VarPattern: 'res'
                │   │       └── VarPattern: 'fl'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call
                │           ├── Number: '2'
                │           └── Number: '3'
                ├── PrintStmt
                │   ├── PrintKw: 'println!'
                │   ├── FormatStr: '"combine: {0}, {1}"'
                │   ├── Expr
                │   │   └── Id: 'res'
                │   └── Expr
                │       └── Id: 'fl'
                ├── LetDecl
                │   ├── LetKw: 'let'
                │   ├── Pattern
                │   │   └── VarPattern: 'f'
                │   ├── Assign: '='
                │   └── Expr
                │       └── Call
                │           ├── Number: '4'
                │           └── Number: '2'
                └── PrintStmt
                    ├── PrintKw: 'println!'
                    ├── FormatStr: '"nested result {}"'
                    └── Expr
                        └── Id: 'f'